// =====================
// App State
// =====================
let chats = JSON.parse(localStorage.getItem("chats")) || [];
let currentIndex = null;

// =====================
// DOM Elements
// =====================
const chatListEl = document.getElementById("chat-list");
const messagesEl = document.getElementById("messages");
const newChatBtn = document.getElementById("new-chat");
const sendBtn = document.getElementById("send-btn");
const userInput = document.getElementById("user-input");
const headerEl = document.querySelector(".chat-header .chat-title");

// =====================
// Save + Render Helpers
// =====================
function saveChats() {
  localStorage.setItem("chats", JSON.stringify(chats));
}

function renderChatList() {
  chatListEl.innerHTML = "";
  chats.forEach((chat, index) => {
    const item = document.createElement("div");
    item.className = "chat-item" + (index === currentIndex ? " selected" : "");
    item.onclick = () => {
      currentIndex = index;
      renderMessages();
      renderChatList();
    };

    const preview = document.createElement("div");
    preview.className = "chat-preview";

    const title = document.createElement("div");
    title.className = "chat-title";
    title.textContent = chat.title || "Untitled Chat";

    const subtitle = document.createElement("div");
    subtitle.className = "chat-subtitle";
    subtitle.textContent = chat.messages.length
      ? chat.messages[chat.messages.length - 1].content.slice(0, 30)
      : "No messages yet";

    preview.appendChild(title);
    preview.appendChild(subtitle);
    item.appendChild(preview);

    // delete button
    const delBtn = document.createElement("button");
    delBtn.className = "delete-btn";
    delBtn.innerHTML = "ğŸ—‘";
    delBtn.onclick = (e) => {
      e.stopPropagation();
      chats.splice(index, 1);
      if (currentIndex === index) {
        currentIndex = null;
        messagesEl.innerHTML = "";
      }
      saveChats();
      renderChatList();
    };
    item.appendChild(delBtn);

    chatListEl.appendChild(item);
  });
}

function renderMessages() {
  messagesEl.innerHTML = "";
  headerEl.textContent = "Barney's ChatGPT"; // always fixed title
  if (currentIndex === null || !chats[currentIndex]) return;

  const chat = chats[currentIndex];
  chat.messages.forEach((msg) => {
    const div = document.createElement("div");
    div.className = `message ${msg.role}`; // âœ… fixed: apply role + message class
    div.textContent = msg.content;

    // Optional: add timestamp
    // const timeDiv = document.createElement("div");
    // timeDiv.className = "msg-time";
    // timeDiv.textContent = new Date().toLocaleTimeString();
    // div.appendChild(timeDiv);

    messagesEl.appendChild(div);
  });

  messagesEl.scrollTop = messagesEl.scrollHeight;
}

// =====================
// Message Handling
// =====================
function sendMessage() {
  const text = userInput.value.trim();
  if (!text) return;

  if (currentIndex === null) {
    chats.push({ title: "New Chat", messages: [] });
    currentIndex = chats.length - 1;
  }

  chats[currentIndex].messages.push({ role: "user", content: text });

  // simulate assistant reply
  setTimeout(() => {
    chats[currentIndex].messages.push({
      role: "assistant",
      content: "This is a simulated response.",
    });
    saveChats();
    renderMessages();
    renderChatList();
  }, 500);

  saveChats();
  renderMessages();
  renderChatList();
  userInput.value = "";
}

// =====================
// Event Listeners
// =====================
sendBtn.addEventListener("click", sendMessage);
userInput.addEventListener("keypress", (e) => {
  if (e.key === "Enter" && !e.shiftKey) {
    e.preventDefault();
    sendMessage();
  }
});

newChatBtn.addEventListener("click", () => {
  chats.push({ title: "New Chat", messages: [] });
  currentIndex = chats.length - 1;
  saveChats();
  renderChatList();
  renderMessages();
});

// =====================
// Init
// =====================
renderChatList();
renderMessages();
